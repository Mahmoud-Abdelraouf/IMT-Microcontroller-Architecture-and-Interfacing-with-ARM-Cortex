/**
 * @file SPI_private.h
 * @brief Private file for the SPI driver.
 * 
 * This file contains the private function prototypes and definitions for the SPI driver.
 * These functions and definitions are not intended to be used outside of the driver.
 * 
 * @note Do not include this file directly in your application code.
 *       Instead, include the public interface file (SPI_interface.h).
 * 
 * @author Mahmoud Abdelraouf Mahmoud
 * @date 15 Jul 2023
 * @version V01
 */

#ifndef __SPI_PRIVATE_H__
#define __SPI_PRIVATE_H__

/**
 * @defgroup SPI_Private_Macros
 * @{
 */
#define SPI_CR1_BR_MSK    0x38      

/**
 * @}
 */


/**
 * @defgroup SPI_Driver SPI Driver
 * @{
 */

/**
 * @brief SPI module number definitions
 *
 * This section defines the different SPI modules in the system and their corresponding numbers.
 *
 * @note The numbers follow a common convention of using sequential numbers to identify different modules.
 *       For example, SPI1 is usually the first SPI module, SPI2 is the second, and so on.
 *
 * @param SPI1: Definition for SPI1 module.
 * @param SPI2: Definition for SPI2 module.
 * @param SPI3: Definition for SPI3 module.
 */
#define SPI1                1 /**< Definition for SPI1 module. */
#define SPI2                2 /**< Definition for SPI2 module. */
#define SPI3                3 /**< Definition for SPI3 module. */

/**
 * @brief Register definitions for the SPI driver.
 *
 * This section defines the base addresses of the different SPI modules and a structure definition for the SPI register map.
 *
 * @note CRC (Cyclic Redundancy Check) is a type of error-detecting code that is commonly used in digital communication networks 
 * and storage devices to detect accidental changes to raw data. The CRC code is generated by performing a mathematical calculation on the data, 
 * which results in a fixed-size, checksum value that can be transmitted along with the data to detect any errors that may have occurred during transmission or storage.
 *
 * CRC is a widely used standard for error detection in a variety of applications, including telecommunications, 
 * computer networking, and storage devices such as hard drives, USB drives, and memory cards. Different CRC standards are available with different 
 * polynomial values and bit-lengths, depending on the specific application requirements.
 *
 * In the context of microcontrollers, such as STM32, CRC can be used to calculate the checksum of data stored 
 * in memory or transmitted over a communication interface, such as SPI, UART, or I2C. The STM32 devices have built-in 
 * CRC hardware modules that can perform the CRC calculation efficiently and quickly, thereby reducing the software overhead and 
 * improving the system's performance.
 */
/**@{*/
#define SPI1_BASE_ADDRESS   0x40013000U /**< Base address for the SPI1 module. */
#define SPI2_BASE_ADDRESS   0x40003800U /**< Base address for the SPI2 module. */
#define SPI3_BASE_ADDRESS   0x40003C00U /**< Base address for the SPI3 module. */

typedef struct {
    volatile u32 CR1;       /**< Control register 1. */
    volatile u32 CR2;       /**< Control register 2. */
    volatile u32 SR;        /**< Status register. */
    volatile u32 DR;        /**< Data register. */
    volatile u32 CRCPR;     /**< CRC polynomial register. */
    volatile u32 RXCRCR;    /**< Receive CRC register. */
    volatile u32 TXCRCR;    /**< Transmit CRC register. */
    volatile u32 I2SCFGR;   /**< I2S configuration register. */
    volatile u32 I2SPR;     /**< I2S prescaler register. */
} SPI_RegDef_t;

/**
 * @brief Select the appropriate SPI module.
 * 
 * This section includes a block of conditional compilation statements to select the appropriate SPI module based on a user-defined value.
 * The user-defined value is defined as SPI_PERIPHERAL, which is expected to be defined outside of this header file.
 * 
 * If the value of SPI_PERIPHERAL matches one of the predefined values (SPI1, SPI2, or SPI3), then the appropriate base address is selected for the SPI module.
 * The SPI register map is then defined using a volatile structure, which defines the various registers of the SPI module.
 * 
 * If SPI_PERIPHERAL is not defined or does not match any of the predefined values, a compilation error is generated with an appropriate error message.
 *
 * @note The SPI_Peripheral macro is expected to be defined in the application code before including this header file.
 *
 * @param SPI: A pointer to the SPI register map for the selected module.
 */
#if     SPI_PERIPHERAL == SPI1
    #define SPI    ((SPI_RegDef_t *)SPI1_BASE_ADDRESS) /**< SPI register map for the SPI1 module. */
#elif   SPI_PERIPHERAL == SPI2
    #define SPI    ((SPI_RegDef_t *)SPI2_BASE_ADDRESS) /**< SPI register map for the SPI2 module. */
#elif   SPI_PERIPHERAL == SPI3
     #define SPI    ((SPI_RegDef_t *)SPI3_BASE_ADDRESS) /**< SPI register map for the SPI3 module. */
#else
    #error "Your Chose is not available" /**< Error message for an invalid SPI module selection. */
#endif

/**
 * @brief SPI Control Register 1 Bits
 *
 * This section defines the bit positions of the SPI Control Register 1 (CR1) and their corresponding bit names.
 *
 * @param SPI_CR1_CPHA: The Clock Phase bit.
 * @param SPI_CR1_CPOL: The Clock Polarity bit.
 * @param SPI_CR1_MSTR: The Master Selection bit.
 * @param SPI_CR1_SPE: The SPI Enable bit.
 * @param SPI_CR1_DFF: The Data Frame Format bit.
 */
#define SPI_CR1_CPHA            0 /**< The Clock Phase bit. */
#define SPI_CR1_CPOL            1 /**< The Clock Polarity bit. */
#define SPI_CR1_MSTR            2 /**< The Master Selection bit. */
#define SPI_CR1_SPE             6 /**< The SPI Enable bit. */
#define SPI_CR1_DFF             11 /**< The Data Frame Format bit. */

/**
 * @}
 */

/**
 * @addtogroup SPI_Private_Functions
 * @{
 */

/**
 * @brief Send a byte of data over SPI.
 * 
 * This function sends a single byte of data over SPI.
 * 
 * @param[in] data The data byte to send.
 * 
 * @note This function is for internal use only.
 */
static void SPI_voidSendByte(u8 data);

/**
 * @brief Receive a byte of data over SPI.
 * 
 * This function receives a single byte of data over SPI.
 * 
 * @return The received data byte.
 * 
 * @note This function is for internal use only.
 */
static u8 SPI_u8ReceiveByte(void);

/**
 * @brief Wait for the SPI transmission to complete.
 * 
 * This function waits for the SPI transmission to complete.
 * 
 * @note This function is for internal use only.
 */
static void SPI_voidWaitForTransmissionComplete(void);

/**
 * @brief Set the SPI slave select pin.
 * 
 * This function sets the SPI slave select pin.
 * 
 * @param[in] status The status to set the slave select pin to (HIGH or LOW).
 * 
 * @note This function is for internal use only.
 */
static void SPI_voidSetSlaveSelectPin(u8 status);

/**
 * @}
 */

#endif /**< __SPI_PRIVATE_H__ */

